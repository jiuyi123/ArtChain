{"remainingRequest":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\src\\components\\SIdentify.vue?vue&type=template&id=38677dc2","dependencies":[{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\src\\components\\SIdentify.vue","mtime":1649080124702},{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646213807074},{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1646213808426},{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1646213809345},{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646213807074},{"path":"D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1646213808668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9InMtY2FudmFzIj4NCiAgICA8Y2FudmFzIGlkPSJzLWNhbnZhcyIgOndpZHRoPSJjb250ZW50V2lkdGgiIDpoZWlnaHQ9ImNvbnRlbnRIZWlnaHQiPjwvY2FudmFzPg0KICA8L2Rpdj4NCg=="},{"version":3,"sources":["D:\\VUESPRINT\\pvue\\springboot-vue-demo\\vue\\src\\components\\SIdentify.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9E,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/VUESPRINT/pvue/springboot-vue-demo/vue/src/components/SIdentify.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"s-canvas\">\r\n    <canvas id=\"s-canvas\" :width=\"contentWidth\" :height=\"contentHeight\"></canvas>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'SIdentify',\r\n  props: {\r\n    identifyCode: {\r\n      type: String,\r\n      default: 'asdf'\r\n    },\r\n\r\n  },\r\n  data(){\r\n    return {\r\n      fontSizeMin: 160,\r\n      fontSizeMax: 40,\r\n      backgroundColorMin: 180,\r\n      backgroundColorMax:240,\r\n      colorMin: 50,\r\n      colorMax: 160,\r\n      lineColorMin:40,\r\n      lineColorMax: 180,\r\n      dotColorMin: 0,\r\n      dotColorMax: 255,\r\n      contentWidth: 112,\r\n      contentHeight: 38\r\n    }\r\n  },\r\n  methods: {\r\n    // 生成一个随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 生成一个随机的颜色\r\n    randomColor(min, max) {\r\n      let r = this.randomNum(min, max)\r\n      let g = this.randomNum(min, max)\r\n      let b = this.randomNum(min, max)\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')'\r\n    },\r\n    drawPic() {\r\n      let canvas = document.getElementById('s-canvas')\r\n      let ctx = canvas.getContext('2d')\r\n      // ctx.textBaseline = 'bottom'\r\n      // 绘制背景\r\n      ctx.fillStyle = this.randomColor(this.backgroundColorMin, this.backgroundColorMax) //图形填充颜色设置\r\n      ctx.strokeStyle = this.randomColor(this.backgroundColorMin, this.backgroundColorMax) //图形轮廓的颜色设置\r\n      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight) //绘制一个填充的矩形 0 0 width height x起点 y起点  宽 高\r\n      ctx.strokeRect(0,0,this.contentWidth, this.contentHeight) // 绘制一个矩形边框 0 0 width height x起点 y起点  宽 高\r\n      // ctx.clearRect(50,0,this.contentWidth,this.contentHeight)  //清除指定矩形区域，清除部分完全透明\r\n      // 绘制文字\r\n      for (let i = 0; i < this.identifyCode.length; i++) {\r\n        this.drawText(ctx, this.identifyCode[i], i)\r\n      }\r\n      this.drawLine(ctx)\r\n      this.drawDot(ctx)\r\n    },\r\n    drawText(ctx, txt, i) {\r\n      ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax)\r\n      ctx.font = this.randomNum(this.fontSizeMin, this.fontSizeMax) + 'px SimHei' //字体大小\r\n      ctx.textBaseline = 'alphabetic' //基线对齐\r\n      let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1))\r\n      let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5)\r\n      var deg = this.randomNum(-45, 45)\r\n      // 修改坐标原点和旋转角度\r\n      ctx.translate(x, y)//移动不同位置  参数偏移量\r\n      ctx.rotate(deg * Math.PI / 180) //旋转 参数角度\r\n      ctx.fillText(txt, 0, 0)\r\n      // 恢复坐标原点和旋转角度\r\n      ctx.rotate(-deg * Math.PI / 180)\r\n      ctx.translate(-x, -y)\r\n    },\r\n    drawLine(ctx) {\r\n      // 绘制干扰线\r\n      for (let i = 0; i < 8; i++) {\r\n        ctx.strokeStyle = this.randomColor(this.lineColorMin, this.lineColorMax)\r\n        ctx.beginPath() //新建一条路径\r\n        ctx.moveTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight)) //设置起点x,y\r\n        ctx.lineTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight)) //绘制直线 x,y 一条当前位置到x,y点的直线\r\n        ctx.stroke() // 通过线条绘制图形轮廓\r\n        // ctx.closePath() //结束闭合路径\r\n      }\r\n    },\r\n    drawDot(ctx) {\r\n      // 绘制干扰点\r\n      for (let i = 0; i < 100; i++) {\r\n        ctx.fillStyle = this.randomColor(0, 255)\r\n        ctx.beginPath()\r\n        // 绘制圆弧或圆，x,y,radius，startAngle,endAngle,anticlockwise // x,y 圆心点，radius 半径，从startAngle开始到endAngle结束\r\n        ctx.arc(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight), 1, 0, 2 * Math.PI)\r\n        ctx.fill() //通过填充路径的内容区域生成实心的图形。\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    identifyCode() {\r\n      this.drawPic()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawPic()\r\n  }\r\n}\r\n</script>\r\n\r\n"]}]}